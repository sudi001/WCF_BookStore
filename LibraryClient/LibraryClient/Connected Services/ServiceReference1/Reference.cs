//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/LibraryWCF")]
    [System.SerializableAttribute()]
    public partial class ServiceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Book", Namespace="http://schemas.datacontract.org/2004/07/LibraryWCF")]
    [System.SerializableAttribute()]
    public partial class Book : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Curr_priceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Curr_price {
            get {
                return this.Curr_priceField;
            }
            set {
                if ((this.Curr_priceField.Equals(value) != true)) {
                    this.Curr_priceField = value;
                    this.RaisePropertyChanged("Curr_price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestConnection", ReplyAction="http://tempuri.org/IService1/TestConnectionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LibraryClient.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/TestConnectionServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/LibraryWCF")]
        LibraryClient.ServiceReference1.ServiceData TestConnection(string ConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestConnection", ReplyAction="http://tempuri.org/IService1/TestConnectionResponse")]
        System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> TestConnectionAsync(string ConnectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        string login(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/login", ReplyAction="http://tempuri.org/IService1/loginResponse")]
        System.Threading.Tasks.Task<string> loginAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logout", ReplyAction="http://tempuri.org/IService1/logoutResponse")]
        void logout(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logout", ReplyAction="http://tempuri.org/IService1/logoutResponse")]
        System.Threading.Tasks.Task logoutAsync(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LibraryClient.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/LibraryWCF")]
        LibraryClient.ServiceReference1.ServiceData Add(string name, string author, string code, int price, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> AddAsync(string name, string author, string code, int price, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(LibraryClient.ServiceReference1.ServiceData), Action="http://tempuri.org/IService1/AddUserServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/LibraryWCF")]
        LibraryClient.ServiceReference1.ServiceData AddUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> AddUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/bye", ReplyAction="http://tempuri.org/IService1/byeResponse")]
        string bye();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/bye", ReplyAction="http://tempuri.org/IService1/byeResponse")]
        System.Threading.Tasks.Task<string> byeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSale", ReplyAction="http://tempuri.org/IService1/CreateSaleResponse")]
        string CreateSale(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSale", ReplyAction="http://tempuri.org/IService1/CreateSaleResponse")]
        System.Threading.Tasks.Task<string> CreateSaleAsync(string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/List", ReplyAction="http://tempuri.org/IService1/ListResponse")]
        LibraryClient.ServiceReference1.Book[] List();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/List", ReplyAction="http://tempuri.org/IService1/ListResponse")]
        System.Threading.Tasks.Task<LibraryClient.ServiceReference1.Book[]> ListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Buy", ReplyAction="http://tempuri.org/IService1/BuyResponse")]
        string Buy(string code, string uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Buy", ReplyAction="http://tempuri.org/IService1/BuyResponse")]
        System.Threading.Tasks.Task<string> BuyAsync(string code, string uid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LibraryClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LibraryClient.ServiceReference1.IService1>, LibraryClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public LibraryClient.ServiceReference1.ServiceData TestConnection(string ConnectionString) {
            return base.Channel.TestConnection(ConnectionString);
        }
        
        public System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> TestConnectionAsync(string ConnectionString) {
            return base.Channel.TestConnectionAsync(ConnectionString);
        }
        
        public string login(string user, string password) {
            return base.Channel.login(user, password);
        }
        
        public System.Threading.Tasks.Task<string> loginAsync(string user, string password) {
            return base.Channel.loginAsync(user, password);
        }
        
        public void logout(string uid) {
            base.Channel.logout(uid);
        }
        
        public System.Threading.Tasks.Task logoutAsync(string uid) {
            return base.Channel.logoutAsync(uid);
        }
        
        public LibraryClient.ServiceReference1.ServiceData Add(string name, string author, string code, int price, string uid) {
            return base.Channel.Add(name, author, code, price, uid);
        }
        
        public System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> AddAsync(string name, string author, string code, int price, string uid) {
            return base.Channel.AddAsync(name, author, code, price, uid);
        }
        
        public LibraryClient.ServiceReference1.ServiceData AddUser(string username, string password) {
            return base.Channel.AddUser(username, password);
        }
        
        public System.Threading.Tasks.Task<LibraryClient.ServiceReference1.ServiceData> AddUserAsync(string username, string password) {
            return base.Channel.AddUserAsync(username, password);
        }
        
        public string bye() {
            return base.Channel.bye();
        }
        
        public System.Threading.Tasks.Task<string> byeAsync() {
            return base.Channel.byeAsync();
        }
        
        public string CreateSale(string uid) {
            return base.Channel.CreateSale(uid);
        }
        
        public System.Threading.Tasks.Task<string> CreateSaleAsync(string uid) {
            return base.Channel.CreateSaleAsync(uid);
        }
        
        public LibraryClient.ServiceReference1.Book[] List() {
            return base.Channel.List();
        }
        
        public System.Threading.Tasks.Task<LibraryClient.ServiceReference1.Book[]> ListAsync() {
            return base.Channel.ListAsync();
        }
        
        public string Buy(string code, string uid) {
            return base.Channel.Buy(code, uid);
        }
        
        public System.Threading.Tasks.Task<string> BuyAsync(string code, string uid) {
            return base.Channel.BuyAsync(code, uid);
        }
    }
}
